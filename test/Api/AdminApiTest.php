<?php
/**
 * AdminApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * The version of the OpenAPI document: 
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AdminApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createIdentity
     *
     * Create an Identity.
     *
     */
    public function testCreateIdentity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createRecoveryLink
     *
     * Create a Recovery Link.
     *
     */
    public function testCreateRecoveryLink()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteIdentity
     *
     * Delete an Identity.
     *
     */
    public function testDeleteIdentity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIdentity
     *
     * Get an Identity.
     *
     */
    public function testGetIdentity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSchema
     *
     * .
     *
     */
    public function testGetSchema()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceError
     *
     * Get User-Facing Self-Service Errors.
     *
     */
    public function testGetSelfServiceError()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceLoginFlow
     *
     * Get Login Flow.
     *
     */
    public function testGetSelfServiceLoginFlow()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceRecoveryFlow
     *
     * Get information about a recovery flow.
     *
     */
    public function testGetSelfServiceRecoveryFlow()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceRegistrationFlow
     *
     * Get Registration Flow.
     *
     */
    public function testGetSelfServiceRegistrationFlow()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceSettingsFlow
     *
     * Get Settings Flow.
     *
     */
    public function testGetSelfServiceSettingsFlow()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSelfServiceVerificationFlow
     *
     * Get Verification Flow.
     *
     */
    public function testGetSelfServiceVerificationFlow()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVersion
     *
     * Return Running Software Version..
     *
     */
    public function testGetVersion()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for isAlive
     *
     * Check HTTP Server Status.
     *
     */
    public function testIsAlive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for isReady
     *
     * Check HTTP Server and Database Status.
     *
     */
    public function testIsReady()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listIdentities
     *
     * List Identities.
     *
     */
    public function testListIdentities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for prometheus
     *
     * Get snapshot metrics from the Kratos service. If you're using k8s, you can then add annotations to your deployment like so:.
     *
     */
    public function testPrometheus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateIdentity
     *
     * Update an Identity.
     *
     */
    public function testUpdateIdentity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
